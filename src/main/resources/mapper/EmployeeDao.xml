<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhaishu.qishouserver.dao.EmployeeDao">

    <resultMap type="com.zhaishu.qishouserver.entity.Employee" id="EmployeeMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="employeeId" column="employee_id" jdbcType="INTEGER"/>
        <result property="shopId" column="shop_id" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="idCard" column="id_card" jdbcType="VARCHAR"/>
        <result property="phoneNum" column="phone_num" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="sex" column="sex" jdbcType="INTEGER"/>
        <result property="avatar" column="avatar" jdbcType="VARCHAR"/>
        <result property="frontIdCard" column="front_id_card" jdbcType="VARCHAR"/>
        <result property="behindIdCard" column="behind_id_card" jdbcType="VARCHAR"/>
        <result property="holdingIdCard" column="holding_id_card" jdbcType="VARCHAR"/>
        <result property="employeeType" column="employee_type" jdbcType="INTEGER"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
        <result property="sarlaryLevel" column="sarlary_level" jdbcType="INTEGER"/>
        <result property="isDelete" column="is_delete" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
    </resultMap>

    <select id="getNextEmployeeId"  resultType="Integer">
        SELECT max(employee_id) FROM employee
    </select>
    <!--查询单个-->
    <select id="queryById" resultMap="EmployeeMap">
        select
          id, employee_id,status, name, id_card, shop_id,phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete
        from employee
        where employee_id = #{id}
    </select>
    <select id="queryByMap"  resultMap="EmployeeMap">
    select  id, employee_id,shop_id,status, name, id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete
    from employee
    <where>
        employee_type <![CDATA[< ]]> 6
        <if test="employee.employeeId != null">
            and employee_id = #{employee.employeeId}
        </if>
        <if test="employee.name != null and employee.name != ''">
            and name = #{employee.name}
        </if>
        <if test="employee.idCard != null and employee.idCard != ''">
            and id_card = #{employee.idCard}
        </if>
        <if test="employee.phoneNum != null and employee.phoneNum != ''">
            and phone_num = #{employee.phoneNum}
        </if>
        <if test="employee.sex != null">
            and sex = #{employee.sex}
        </if>
        <if test="employee.employeeType != null">
            and employee_type = #{employee.employeeType}
        </if>
        <if test="employee.isDelete != null">
            and is_delete = #{employee.isDelete}
        </if>
    </where>
    limit #{offset},#{limit}
    </select>
    <select id="countMap"  resultType="int">
        select count(*)
        from employee
        <where>
            employee_type <![CDATA[< ]]> 6
            <if test="employee.employeeId != null">
                and employee_id = #{employee.employeeId}
            </if>
            <if test="employee.name != null and employee.name != ''">
                and name = #{employee.name}
            </if>
            <if test="employee.idCard != null and employee.idCard != ''">
                and id_card = #{employee.idCard}
            </if>
            <if test="employee.phoneNum != null and employee.phoneNum != ''">
                and phone_num = #{employee.phoneNum}
            </if>
            <if test="employee.sex != null">
                and sex = #{employee.sex}
            </if>
            <if test="employee.employeeType != null">
                and employee_type = #{employee.employeeType}
            </if>

            <if test="employee.isDelete != null">
                and is_delete = #{employee.isDelete}
            </if>
        </where>
    </select>
    <select id="queryByType" resultMap="EmployeeMap">
        select
            id, employee_id, name, id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete, create_time, create_by, update_time, update_by
        from employee
        where employee_type = #{type}
    </select>
    <select id="queryByTel" resultMap="EmployeeMap">
        select
        id, employee_id, name,shop_id,password, id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete
        from employee
        where phone_num = #{tel}
    </select>

    <select id="queryByName" resultMap="EmployeeMap">
        select
            id, employee_id, name, shop_id,id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete
        from employee
        where name = #{name}
    </select>
    <!--查询指定行数据-->
    <select id="queryAdminByLimit" resultMap="EmployeeMap">
        select
          id, employee_id, name, id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete
        from employee where employee_type  between 1 and  5
        limit #{offset},#{limit}
    </select>
    <select id="queryAdminByStatus" resultMap="EmployeeMap">
        select
            id, employee_id, name, id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete
        from employee where (employee_type  between 1 and  5) and (is_delete = #{status})
            limit #{offset},#{limit}
    </select>

    <select id="queryAdminByType" resultMap="EmployeeMap">
        select
            id, employee_id, name, id_card, phone_num, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete, create_time, create_by, update_time, update_by
        from employee where employee_type = #{type}
            limit #{offset},#{limit}
    </select>
    <!--统计总行数-->
    <select id="count" resultType="int">
        select count(1)
        from employee
    </select>
    <!--统计总行数-->
    <select id="countAdmin" resultType="int">
        select count(*)
        from employee where employee_type  between 1 and  5
    </select>
    <select id="countAdminByStatus" resultType="int">
        select count(*)
        from employee where (employee_type  between 1 and  5) and is_delete = #{status}
    </select>
    <select id="countAdminbyType" resultType="int">
        select count(*)
        from employee where employee_type  = #{type}
    </select>
    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into employee(employee_id,name, shop_id,id_card, phone_num, password, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete, create_time, create_by, update_time, update_by)
        values (#{employeeId},#{name},#{shopId}, #{idCard}, #{phoneNum}, #{password}, #{sex}, #{avatar}, #{frontIdCard}, #{behindIdCard}, #{holdingIdCard}, #{employeeType}, #{sarlaryLevel}, #{isDelete}, #{createTime}, #{createBy}, #{updateTime}, #{updateBy})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into employee(employee_id, name, id_card, phone_num, password, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete, create_time, create_by, update_time, update_by)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.employeeId}, #{entity.name}, #{entity.idCard}, #{entity.phoneNum}, #{entity.password}, #{entity.sex}, #{entity.avatar}, #{entity.frontIdCard}, #{entity.behindIdCard}, #{entity.holdingIdCard}, #{entity.employeeType}, #{entity.sarlaryLevel}, #{entity.isDelete}, #{entity.createTime}, #{entity.createBy}, #{entity.updateTime}, #{entity.updateBy})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into employee(employee_id, name, id_card, phone_num, password, sex, avatar, front_id_card, behind_id_card, holding_id_card, employee_type, sarlary_level, is_delete, create_time, create_by, update_time, update_by)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.employeeId}, #{entity.name}, #{entity.idCard}, #{entity.phoneNum}, #{entity.password}, #{entity.sex}, #{entity.avatar}, #{entity.frontIdCard}, #{entity.behindIdCard}, #{entity.holdingIdCard}, #{entity.employeeType}, #{entity.sarlaryLevel}, #{entity.isDelete}, #{entity.createTime}, #{entity.createBy}, #{entity.updateTime}, #{entity.updateBy})
        </foreach>
        on duplicate key update
        employee_id = values(employee_id),
        name = values(name),
        id_card = values(id_card),
        phone_num = values(phone_num),
        password = values(password),
        sex = values(sex),
        avatar = values(avatar),
        front_id_card = values(front_id_card),
        behind_id_card = values(behind_id_card),
        holding_id_card = values(holding_id_card),
        employee_type = values(employee_type),
        sarlary_level = values(sarlary_level),
        is_delete = values(is_delete),
        create_time = values(create_time),
        create_by = values(create_by),
        update_time = values(update_time),
        update_by = values(update_by)
    </insert>

    <update id="update">
        update employee
        <set>
            <if test="shopId != null">
                shop_id = #{shopId},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="idCard != null and idCard != ''">
                id_card = #{idCard},
            </if>
            <if test="phoneNum != null and phoneNum != ''">
                phone_num = #{phoneNum},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="avatar != null and avatar != ''">
                avatar = #{avatar},
            </if>
            <if test="frontIdCard != null and frontIdCard != ''">
                front_id_card = #{frontIdCard},
            </if>
            <if test="behindIdCard != null and behindIdCard != ''">
                behind_id_card = #{behindIdCard},
            </if>
            <if test="holdingIdCard != null and holdingIdCard != ''">
                holding_id_card = #{holdingIdCard},
            </if>
            <if test="employeeType != null">
                employee_type = #{employeeType},
            </if>
            <if test="sarlaryLevel != null">
                sarlary_level = #{sarlaryLevel},
            </if>
            <if test="isDelete != null">
                is_delete = #{isDelete},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="createBy != null">
                create_by = #{createBy},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy},
            </if>
        </set>
        where employee_id = #{employeeId}
    </update>

    <update id="updateTypeByTel">
        update employee set employee_type = #{type} where  phone_num = #{tel}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from employee where employee_id = #{id}
    </delete>

</mapper>

